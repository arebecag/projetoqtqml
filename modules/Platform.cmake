include(TestBigEndian)

string(TOUPPER ${PROJECT_NAME} PROJ_NAME)

TEST_BIG_ENDIAN(IS_BIG_ENDIAN)

if(IS_BIG_ENDIAN)
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_ENDIAN_BIG)
else()
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_ENDIAN_LITTLE)
endif()

if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_ARCH_X64)
elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_ARCH_X86)
else()
    message(FATAL_ERROR "Unsuported architecture")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_OS_LINUX)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_OS_FREEBSD)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_OS_WINDOWS)
    list(APPEND PLATFORM_DEFINES -D_CRT_SECURE_NO_WARNINGS)
    list(APPEND PLATFORM_DEFINES -DWIN32_LEAN_AND_MEAN)
    list(APPEND PLATFORM_DEFINES -DVC_EXTRALEAN)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    list(APPEND PLATFORM_DEFINES -D${PROJ_NAME}_OS_MACOS)
else()
    message(FATAL_ERROR "Unsuported OS '${CMAKE_SYSTEM_NAME}'")
endif()

