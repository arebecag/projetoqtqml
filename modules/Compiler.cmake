string(TOUPPER "${PROJECT_NAME}" PROJ_NAME)
string(TOUPPER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)

if (("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))
    set(SYSTEM_DEBUGGER gdb)
    set(DEBUGGER_PARAMS -ex run)

    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_COMPILER_GCC)

    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
        list(APPEND C_COMPILER_OPTIONS -std=c11)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        list(APPEND CXX_COMPILER_OPTIONS -std=c++17)
    endif()

    list(APPEND COMPILER_OPTIONS -Wall)
    list(APPEND COMPILER_OPTIONS -Wextra)
    list(APPEND COMPILER_OPTIONS -Wpedantic)
    list(APPEND COMPILER_OPTIONS -Wsign-conversion)
    list(APPEND COMPILER_OPTIONS -Wmissing-declarations)

    if("${BUILD_TYPE}" STREQUAL "DEBUG")
        list(APPEND COMPILER_OPTIONS -O0)
        list(APPEND COMPILER_OPTIONS -g)
    elseif(("${BUILD_TYPE}" STREQUAL "RELEASE") OR ("${BUILD_TYPE}" STREQUAL ""))
        list(APPEND COMPILER_OPTIONS -O3)
    elseif("${BUILD_TYPE}" STREQUAL "RELWITHDEBINFO")
        list(APPEND COMPILER_OPTIONS -O2)
        list(APPEND COMPILER_OPTIONS -g)
    elseif("${BUILD_TYPE}" STREQUAL "MINSIZEREL")
        list(APPEND COMPILER_OPTIONS -Os)
    endif()
elseif (("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_COMPILER_CLANG)

    set(SYSTEM_DEBUGGER lldb)

    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
        list(APPEND C_COMPILER_OPTIONS -std=c11)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        list(APPEND CXX_COMPILER_OPTIONS -std=c++17)
    endif()

    list(APPEND COMPILER_OPTIONS -Wall)
    list(APPEND COMPILER_OPTIONS -Wextra)
    list(APPEND COMPILER_OPTIONS -Wpedantic)
    list(APPEND COMPILER_OPTIONS -Wsign-conversion)
    list(APPEND COMPILER_OPTIONS -Wmissing-variable-declarations)

    if("${BUILD_TYPE}" STREQUAL "DEBUG")
        list(APPEND COMPILER_OPTIONS -O0)
        list(APPEND COMPILER_OPTIONS -g)
    elseif(("${BUILD_TYPE}" STREQUAL "RELEASE") OR ("${BUILD_TYPE}" STREQUAL ""))
        list(APPEND COMPILER_OPTIONS -O3)
    elseif("${BUILD_TYPE}" STREQUAL "RELWITHDEBINFO")
        list(APPEND COMPILER_OPTIONS -O2)
        list(APPEND COMPILER_OPTIONS -g)
    elseif("${BUILD_TYPE}" STREQUAL "MINSIZEREL")
        list(APPEND COMPILER_OPTIONS -Os)
    endif()
elseif (("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC"))
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_COMPILER_MSVC)

    list(APPEND COMPILER_OPTIONS -W4)

    if("${BUILD_TYPE}" STREQUAL "DEBUG")
        list(APPEND COMPILER_OPTIONS -Od)
        list(APPEND COMPILER_OPTIONS -Zi)
    endif()
elseif (("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"))
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_COMPILER_INTEL)

    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
        list(APPEND C_COMPILER_OPTIONS -std=c11)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
        list(APPEND CXX_COMPILER_OPTIONS -std=c++17)
    endif()

    list(APPEND COMPILER_OPTIONS -Wall)
    list(APPEND COMPILER_OPTIONS -Wremarks)
    list(APPEND COMPILER_OPTIONS -Wcheck)
    list(APPEND COMPILER_OPTIONS -Weffc++)

    if("${BUILD_TYPE}" STREQUAL "DEBUG")
        list(APPEND COMPILER_OPTIONS -O0)
        list(APPEND COMPILER_OPTIONS -g3)
        list(APPEND COMPILER_OPTIONS -check-pointers=rw)
        list(APPEND COMPILER_OPTIONS -check-pointers-dangling=all)
        list(APPEND COMPILER_OPTIONS -check-pointers-undimensioned)
        list(APPEND COMPILER_OPTIONS -check-pointers-narrowing)
    elseif(("${BUILD_TYPE}" STREQUAL "RELEASE") OR ("${BUILD_TYPE}" STREQUAL ""))
        list(APPEND COMPILER_OPTIONS -O3)
    elseif("${BUILD_TYPE}" STREQUAL "RELWITHDEBINFO")
        list(APPEND COMPILER_OPTIONS -O2)
        list(APPEND COMPILER_OPTIONS -g1)
    elseif("${BUILD_TYPE}" STREQUAL "MINSIZEREL")
        list(APPEND COMPILER_OPTIONS -Os)
    endif()
else()
    # AppleClang
    # Watcom

    if(NOT "${CMAKE_C_COMPILER_ID}" STREQUAL "")
        message(FATAL_ERROR "Compiler '${CMAKE_C_COMPILER_ID}' is not supported")
    elseif(NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "")
        message(FATAL_ERROR "Compiler '${CMAKE_CXX_COMPILER_ID}' is not supported")
    else()
        message(FATAL_ERROR "No C/C++ compiler found")
    endif()
endif()

if("${BUILD_TYPE}" STREQUAL "DEBUG")
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_BUILD_DEBUG)
elseif(("${BUILD_TYPE}" STREQUAL "RELEASE") OR ("${BUILD_TYPE}" STREQUAL ""))
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_BUILD_RELEASE)
elseif("${BUILD_TYPE}" STREQUAL "RELWITHDEBINFO")
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_BUILD_RELWITHDEBINFO)
elseif("${BUILD_TYPE}" STREQUAL "MINSIZEREL")
    list(APPEND COMPILER_DEFINES -D${PROJ_NAME}_BUILD_MINSIZEREL)
endif()

list(APPEND C_COMPILER_OPTIONS ${COMPILER_OPTIONS})
list(APPEND C_COMPILER_DEFINES ${COMPILER_DEFINES})

list(APPEND CXX_COMPILER_OPTIONS ${COMPILER_OPTIONS})
list(APPEND CXX_COMPILER_DEFINES ${COMPILER_DEFINES})
